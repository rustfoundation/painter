; ModuleID = 'linkedlist.c'
source_filename = "linkedlist.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.16.0"

%struct.SimpleLinkedList = type { i32, %struct.SimpleLinkedList* }
%struct.NodeA = type { i32, %struct.NodeB* }
%struct.NodeB = type { i32, %struct.NodeA* }
%struct.SomeOpaqueStruct = type opaque

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @simple_linked_list(i32) #0 !dbg !10 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.SimpleLinkedList, align 8
  %4 = alloca %struct.SimpleLinkedList, align 8
  %5 = alloca %struct.SimpleLinkedList, align 8
  %6 = alloca %struct.SimpleLinkedList, align 8
  %7 = alloca %struct.SimpleLinkedList, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !14, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata %struct.SimpleLinkedList* %3, metadata !16, metadata !DIExpression()), !dbg !22
  %8 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %3, i32 0, i32 0, !dbg !23
  %9 = load i32, i32* %2, align 4, !dbg !24
  store i32 %9, i32* %8, align 8, !dbg !23
  %10 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %3, i32 0, i32 1, !dbg !23
  store %struct.SimpleLinkedList* null, %struct.SimpleLinkedList** %10, align 8, !dbg !23
  %11 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %3, i32 0, i32 0, !dbg !25
  %12 = load i32, i32* %11, align 8, !dbg !26
  %13 = add nsw i32 %12, 2, !dbg !26
  store i32 %13, i32* %11, align 8, !dbg !26
  call void @llvm.dbg.declare(metadata %struct.SimpleLinkedList* %4, metadata !27, metadata !DIExpression()), !dbg !28
  %14 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %4, i32 0, i32 0, !dbg !29
  %15 = load i32, i32* %2, align 4, !dbg !30
  %16 = sub nsw i32 %15, 3, !dbg !31
  store i32 %16, i32* %14, align 8, !dbg !29
  %17 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %4, i32 0, i32 1, !dbg !29
  store %struct.SimpleLinkedList* null, %struct.SimpleLinkedList** %17, align 8, !dbg !29
  call void @llvm.dbg.declare(metadata %struct.SimpleLinkedList* %5, metadata !32, metadata !DIExpression()), !dbg !33
  %18 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %5, i32 0, i32 0, !dbg !34
  %19 = load i32, i32* %2, align 4, !dbg !35
  %20 = mul nsw i32 %19, 5, !dbg !36
  store i32 %20, i32* %18, align 8, !dbg !34
  %21 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %5, i32 0, i32 1, !dbg !34
  store %struct.SimpleLinkedList* null, %struct.SimpleLinkedList** %21, align 8, !dbg !34
  call void @llvm.dbg.declare(metadata %struct.SimpleLinkedList* %6, metadata !37, metadata !DIExpression()), !dbg !38
  %22 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %6, i32 0, i32 0, !dbg !39
  %23 = load i32, i32* %2, align 4, !dbg !40
  %24 = sdiv i32 %23, 2, !dbg !41
  store i32 %24, i32* %22, align 8, !dbg !39
  %25 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %6, i32 0, i32 1, !dbg !39
  store %struct.SimpleLinkedList* null, %struct.SimpleLinkedList** %25, align 8, !dbg !39
  call void @llvm.dbg.declare(metadata %struct.SimpleLinkedList* %7, metadata !42, metadata !DIExpression()), !dbg !43
  %26 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %7, i32 0, i32 0, !dbg !44
  %27 = load i32, i32* %2, align 4, !dbg !45
  %28 = sdiv i32 %27, 100, !dbg !46
  store i32 %28, i32* %26, align 8, !dbg !44
  %29 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %7, i32 0, i32 1, !dbg !44
  store %struct.SimpleLinkedList* null, %struct.SimpleLinkedList** %29, align 8, !dbg !44
  %30 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %3, i32 0, i32 1, !dbg !47
  store %struct.SimpleLinkedList* %4, %struct.SimpleLinkedList** %30, align 8, !dbg !48
  %31 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %4, i32 0, i32 1, !dbg !49
  store %struct.SimpleLinkedList* %5, %struct.SimpleLinkedList** %31, align 8, !dbg !50
  %32 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %5, i32 0, i32 1, !dbg !51
  store %struct.SimpleLinkedList* %6, %struct.SimpleLinkedList** %32, align 8, !dbg !52
  %33 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %6, i32 0, i32 1, !dbg !53
  store %struct.SimpleLinkedList* %7, %struct.SimpleLinkedList** %33, align 8, !dbg !54
  %34 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %7, i32 0, i32 1, !dbg !55
  store %struct.SimpleLinkedList* %3, %struct.SimpleLinkedList** %34, align 8, !dbg !56
  %35 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %3, i32 0, i32 1, !dbg !57
  %36 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %35, align 8, !dbg !57
  %37 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %36, i32 0, i32 1, !dbg !58
  %38 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %37, align 8, !dbg !58
  %39 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %38, i32 0, i32 1, !dbg !59
  %40 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %39, align 8, !dbg !59
  %41 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %40, i32 0, i32 1, !dbg !60
  %42 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %41, align 8, !dbg !60
  %43 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %42, i32 0, i32 1, !dbg !61
  %44 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %43, align 8, !dbg !61
  %45 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %44, i32 0, i32 1, !dbg !62
  %46 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %45, align 8, !dbg !62
  %47 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %46, i32 0, i32 1, !dbg !63
  %48 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %47, align 8, !dbg !63
  %49 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %48, i32 0, i32 1, !dbg !64
  %50 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %49, align 8, !dbg !64
  %51 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %50, i32 0, i32 1, !dbg !65
  %52 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %51, align 8, !dbg !65
  %53 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %52, i32 0, i32 1, !dbg !66
  %54 = load %struct.SimpleLinkedList*, %struct.SimpleLinkedList** %53, align 8, !dbg !66
  %55 = getelementptr inbounds %struct.SimpleLinkedList, %struct.SimpleLinkedList* %54, i32 0, i32 0, !dbg !67
  %56 = load i32, i32* %55, align 8, !dbg !67
  ret i32 %56, !dbg !68
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @indirectly_recursive_type(i32) #0 !dbg !69 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.NodeA, align 8
  %4 = alloca %struct.NodeB, align 8
  %5 = alloca %struct.NodeA, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !70, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.declare(metadata %struct.NodeA* %3, metadata !72, metadata !DIExpression()), !dbg !83
  %6 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %3, i32 0, i32 0, !dbg !84
  %7 = load i32, i32* %2, align 4, !dbg !85
  store i32 %7, i32* %6, align 8, !dbg !84
  %8 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %3, i32 0, i32 1, !dbg !84
  store %struct.NodeB* null, %struct.NodeB** %8, align 8, !dbg !84
  call void @llvm.dbg.declare(metadata %struct.NodeB* %4, metadata !86, metadata !DIExpression()), !dbg !87
  %9 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %4, i32 0, i32 0, !dbg !88
  %10 = load i32, i32* %2, align 4, !dbg !89
  %11 = add nsw i32 %10, 3, !dbg !90
  store i32 %11, i32* %9, align 8, !dbg !88
  %12 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %4, i32 0, i32 1, !dbg !88
  store %struct.NodeA* null, %struct.NodeA** %12, align 8, !dbg !88
  call void @llvm.dbg.declare(metadata %struct.NodeA* %5, metadata !91, metadata !DIExpression()), !dbg !92
  %13 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %5, i32 0, i32 0, !dbg !93
  %14 = load i32, i32* %2, align 4, !dbg !94
  %15 = sdiv i32 %14, 4, !dbg !95
  store i32 %15, i32* %13, align 8, !dbg !93
  %16 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %5, i32 0, i32 1, !dbg !93
  store %struct.NodeB* null, %struct.NodeB** %16, align 8, !dbg !93
  %17 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %3, i32 0, i32 1, !dbg !96
  store %struct.NodeB* %4, %struct.NodeB** %17, align 8, !dbg !97
  %18 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %4, i32 0, i32 1, !dbg !98
  store %struct.NodeA* %5, %struct.NodeA** %18, align 8, !dbg !99
  %19 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %5, i32 0, i32 1, !dbg !100
  store %struct.NodeB* %4, %struct.NodeB** %19, align 8, !dbg !101
  %20 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %3, i32 0, i32 1, !dbg !102
  %21 = load %struct.NodeB*, %struct.NodeB** %20, align 8, !dbg !102
  %22 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %21, i32 0, i32 1, !dbg !103
  %23 = load %struct.NodeA*, %struct.NodeA** %22, align 8, !dbg !103
  %24 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %23, i32 0, i32 1, !dbg !104
  %25 = load %struct.NodeB*, %struct.NodeB** %24, align 8, !dbg !104
  %26 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %25, i32 0, i32 1, !dbg !105
  %27 = load %struct.NodeA*, %struct.NodeA** %26, align 8, !dbg !105
  %28 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %27, i32 0, i32 1, !dbg !106
  %29 = load %struct.NodeB*, %struct.NodeB** %28, align 8, !dbg !106
  %30 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %29, i32 0, i32 1, !dbg !107
  %31 = load %struct.NodeA*, %struct.NodeA** %30, align 8, !dbg !107
  %32 = getelementptr inbounds %struct.NodeA, %struct.NodeA* %31, i32 0, i32 1, !dbg !108
  %33 = load %struct.NodeB*, %struct.NodeB** %32, align 8, !dbg !108
  %34 = getelementptr inbounds %struct.NodeB, %struct.NodeB* %33, i32 0, i32 0, !dbg !109
  %35 = load i32, i32* %34, align 8, !dbg !109
  ret i32 %35, !dbg !110
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @takes_opaque_struct(%struct.SomeOpaqueStruct*) #0 !dbg !111 {
  %2 = alloca %struct.SomeOpaqueStruct*, align 8
  store %struct.SomeOpaqueStruct* %0, %struct.SomeOpaqueStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.SomeOpaqueStruct** %2, metadata !116, metadata !DIExpression()), !dbg !117
  %3 = load %struct.SomeOpaqueStruct*, %struct.SomeOpaqueStruct** %2, align 8, !dbg !118
  %4 = icmp ne %struct.SomeOpaqueStruct* %3, null, !dbg !119
  %5 = zext i1 %4 to i32, !dbg !119
  ret i32 %5, !dbg !120
}

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 8.0.1 (tags/RELEASE_801/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, nameTableKind: GNU)
!1 = !DIFile(filename: "linkedlist.c", directory: "/Users/craig/llvm-ir/tests/basic_bc")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"PIC Level", i32 2}
!9 = !{!"clang version 8.0.1 (tags/RELEASE_801/final)"}
!10 = distinct !DISubprogram(name: "simple_linked_list", scope: !1, file: !1, line: 8, type: !11, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !13}
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DILocalVariable(name: "x", arg: 1, scope: !10, file: !1, line: 8, type: !13)
!15 = !DILocation(line: 8, column: 28, scope: !10)
!16 = !DILocalVariable(name: "list", scope: !10, file: !1, line: 9, type: !17)
!17 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SimpleLinkedList", file: !1, line: 3, size: 128, elements: !18)
!18 = !{!19, !20}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !17, file: !1, line: 4, baseType: !13, size: 32)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !17, file: !1, line: 5, baseType: !21, size: 64, offset: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!22 = !DILocation(line: 9, column: 27, scope: !10)
!23 = !DILocation(line: 9, column: 34, scope: !10)
!24 = !DILocation(line: 9, column: 36, scope: !10)
!25 = !DILocation(line: 10, column: 8, scope: !10)
!26 = !DILocation(line: 10, column: 12, scope: !10)
!27 = !DILocalVariable(name: "list_1", scope: !10, file: !1, line: 11, type: !17)
!28 = !DILocation(line: 11, column: 27, scope: !10)
!29 = !DILocation(line: 11, column: 36, scope: !10)
!30 = !DILocation(line: 11, column: 38, scope: !10)
!31 = !DILocation(line: 11, column: 40, scope: !10)
!32 = !DILocalVariable(name: "list_2", scope: !10, file: !1, line: 12, type: !17)
!33 = !DILocation(line: 12, column: 27, scope: !10)
!34 = !DILocation(line: 12, column: 36, scope: !10)
!35 = !DILocation(line: 12, column: 38, scope: !10)
!36 = !DILocation(line: 12, column: 40, scope: !10)
!37 = !DILocalVariable(name: "list_3", scope: !10, file: !1, line: 13, type: !17)
!38 = !DILocation(line: 13, column: 27, scope: !10)
!39 = !DILocation(line: 13, column: 36, scope: !10)
!40 = !DILocation(line: 13, column: 38, scope: !10)
!41 = !DILocation(line: 13, column: 40, scope: !10)
!42 = !DILocalVariable(name: "list_4", scope: !10, file: !1, line: 14, type: !17)
!43 = !DILocation(line: 14, column: 27, scope: !10)
!44 = !DILocation(line: 14, column: 36, scope: !10)
!45 = !DILocation(line: 14, column: 38, scope: !10)
!46 = !DILocation(line: 14, column: 40, scope: !10)
!47 = !DILocation(line: 15, column: 8, scope: !10)
!48 = !DILocation(line: 15, column: 13, scope: !10)
!49 = !DILocation(line: 16, column: 10, scope: !10)
!50 = !DILocation(line: 16, column: 15, scope: !10)
!51 = !DILocation(line: 17, column: 10, scope: !10)
!52 = !DILocation(line: 17, column: 15, scope: !10)
!53 = !DILocation(line: 18, column: 10, scope: !10)
!54 = !DILocation(line: 18, column: 15, scope: !10)
!55 = !DILocation(line: 19, column: 10, scope: !10)
!56 = !DILocation(line: 19, column: 15, scope: !10)
!57 = !DILocation(line: 20, column: 15, scope: !10)
!58 = !DILocation(line: 20, column: 21, scope: !10)
!59 = !DILocation(line: 20, column: 27, scope: !10)
!60 = !DILocation(line: 20, column: 33, scope: !10)
!61 = !DILocation(line: 20, column: 39, scope: !10)
!62 = !DILocation(line: 20, column: 45, scope: !10)
!63 = !DILocation(line: 20, column: 51, scope: !10)
!64 = !DILocation(line: 20, column: 57, scope: !10)
!65 = !DILocation(line: 20, column: 63, scope: !10)
!66 = !DILocation(line: 20, column: 69, scope: !10)
!67 = !DILocation(line: 20, column: 75, scope: !10)
!68 = !DILocation(line: 20, column: 3, scope: !10)
!69 = distinct !DISubprogram(name: "indirectly_recursive_type", scope: !1, file: !1, line: 35, type: !11, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!70 = !DILocalVariable(name: "x", arg: 1, scope: !69, file: !1, line: 35, type: !13)
!71 = !DILocation(line: 35, column: 35, scope: !69)
!72 = !DILocalVariable(name: "a", scope: !69, file: !1, line: 36, type: !73)
!73 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "NodeA", file: !1, line: 25, size: 128, elements: !74)
!74 = !{!75, !76}
!75 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !73, file: !1, line: 26, baseType: !13, size: 32)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !73, file: !1, line: 27, baseType: !77, size: 64, offset: 64)
!77 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !78, size: 64)
!78 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "NodeB", file: !1, line: 30, size: 128, elements: !79)
!79 = !{!80, !81}
!80 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !78, file: !1, line: 31, baseType: !13, size: 32)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !78, file: !1, line: 32, baseType: !82, size: 64, offset: 64)
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !73, size: 64)
!83 = !DILocation(line: 36, column: 16, scope: !69)
!84 = !DILocation(line: 36, column: 20, scope: !69)
!85 = !DILocation(line: 36, column: 22, scope: !69)
!86 = !DILocalVariable(name: "b", scope: !69, file: !1, line: 37, type: !78)
!87 = !DILocation(line: 37, column: 16, scope: !69)
!88 = !DILocation(line: 37, column: 20, scope: !69)
!89 = !DILocation(line: 37, column: 22, scope: !69)
!90 = !DILocation(line: 37, column: 24, scope: !69)
!91 = !DILocalVariable(name: "a_1", scope: !69, file: !1, line: 38, type: !73)
!92 = !DILocation(line: 38, column: 16, scope: !69)
!93 = !DILocation(line: 38, column: 22, scope: !69)
!94 = !DILocation(line: 38, column: 24, scope: !69)
!95 = !DILocation(line: 38, column: 26, scope: !69)
!96 = !DILocation(line: 39, column: 5, scope: !69)
!97 = !DILocation(line: 39, column: 7, scope: !69)
!98 = !DILocation(line: 40, column: 5, scope: !69)
!99 = !DILocation(line: 40, column: 7, scope: !69)
!100 = !DILocation(line: 41, column: 7, scope: !69)
!101 = !DILocation(line: 41, column: 9, scope: !69)
!102 = !DILocation(line: 42, column: 12, scope: !69)
!103 = !DILocation(line: 42, column: 15, scope: !69)
!104 = !DILocation(line: 42, column: 18, scope: !69)
!105 = !DILocation(line: 42, column: 21, scope: !69)
!106 = !DILocation(line: 42, column: 24, scope: !69)
!107 = !DILocation(line: 42, column: 27, scope: !69)
!108 = !DILocation(line: 42, column: 30, scope: !69)
!109 = !DILocation(line: 42, column: 33, scope: !69)
!110 = !DILocation(line: 42, column: 3, scope: !69)
!111 = distinct !DISubprogram(name: "takes_opaque_struct", scope: !1, file: !1, line: 48, type: !112, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!112 = !DISubroutineType(types: !113)
!113 = !{!13, !114}
!114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !115, size: 64)
!115 = !DICompositeType(tag: DW_TAG_structure_type, name: "SomeOpaqueStruct", file: !1, line: 46, flags: DIFlagFwdDecl)
!116 = !DILocalVariable(name: "s", arg: 1, scope: !111, file: !1, line: 48, type: !114)
!117 = !DILocation(line: 48, column: 50, scope: !111)
!118 = !DILocation(line: 49, column: 10, scope: !111)
!119 = !DILocation(line: 49, column: 12, scope: !111)
!120 = !DILocation(line: 49, column: 3, scope: !111)
